<div id="main" class="container">
  <h1>Minesweeper by <%= link_to '@gtoroap', "https://github.com/gtoroap/minesweeper", target: "_blank" %></h1>
  <button onclick='createGame()'>New Game</button>
  <p></p>
</div>

<script>

  const hiddenCellColor = "#ededed";
  const visibleCellColor = "#ffffff";
  const foundMineColor = "#ff0000";
  const textColor = "#1f1f1f";
  const cellWidth = 40;
  const padding = 10;

  var createGame = function(){
    $.ajax({
      method: "POST",
      url: "http://localhost:3000/api/v1/games",
      data: {
        rows: 10,
        columns: 10,
        mines: 20
      }
    })
    .done(function( response ) {
      createBoard(response.id, response.rows, response.columns, response.mines);
    });
  }

  var createBoard = function(gameId, rows, columns, mines){
    //Destroy any existing canvas and banner
    var oldCanvas = document.getElementsByTagName("canvas");
    if(oldCanvas.length > 0){
      oldCanvas[0].parentNode.removeChild(oldCanvas[0]);
      var banner = document.getElementById('notice');
      banner.parentNode.removeChild(banner);
    }

    var gridWith = cellWidth * rows;
    var gridHeight = cellWidth * columns;
    var canvas = document.createElement('canvas');
    canvas.id = gameId;
    canvas.width = gridWith + padding * 2;
    canvas.height = gridHeight + padding * 2;
    var context = canvas.getContext("2d");
    var container = document.getElementById('main');
    container.appendChild(canvas);

    for (var x = 0; x <= gridWith; x += 40) {
        context.moveTo(0.5 + x + padding, padding);
        context.lineTo(0.5 + x + padding, gridHeight + padding);
    }

    for (var x = 0; x <= gridHeight; x += 40) {
        context.moveTo(padding, 0.5 + x + padding);
        context.lineTo(gridWith + padding, 0.5 + x + padding);
    }

    context.strokeStyle = "black";
    context.stroke();

    context.font = "24px Arial";
    context.textAlign = "center";

    for (var y = 0; y < columns; y ++) {
      for (var x = 0; x < rows; x ++) {
        context.fillStyle = hiddenCellColor;
        context.fillRect(40 * x + padding + 1, 40 * y + padding + 1, cellWidth - 1, cellWidth - 1);
      }
    }
    canvas.removeAttribute("hidden");

    canvas.addEventListener("contextmenu", function(e) {
      e.preventDefault();
      putFlag(gameId, e.offsetX, e.offsetY, rows, columns)
    });

    canvas.addEventListener("click", function(e) {
      checkMove(gameId, e.offsetX, e.offsetY, rows, columns)
    });
  }

  var putFlag = function(gameId, x, y, rows, columns){
    var _x = Math.floor((x - padding) / cellWidth);
    var _y = Math.floor((y - padding) / cellWidth);

    if (_x > -1 && _x < rows && _y > -1 && _y < columns){
      var canvas = document.getElementById(gameId);
      var context = canvas.getContext("2d");
      var p = 40 * _x + padding + 1;
      var q = 40 * _y + padding + 1;
      var width = cellWidth - 1;

      $.ajax({
        method: "POST",
        url: `http://localhost:3000/api/v1/games/${gameId}/flags`,
        data: {
          point_x: _x,
          point_y: _y
        }
      }).done(function( response ) {
        context.fillStyle = hiddenCellColor;
        context.fillRect(p, q, width, width);

        if(response.kind == null){
          context.fillText('', p + 22, q + 26, width, width);
        }
        if(response.kind == 'flag'){
          context.fillText('🚩', p + 22, q + 26, width, width);
        }
        if(response.kind == 'question'){
          context.fillText('❓', p + 22, q + 26, width, width);
        }
      });
    }
  }

  var checkMove = function(gameId, x, y, rows, columns){
    var _x = Math.floor((x - padding) / cellWidth);
    var _y = Math.floor((y - padding) / cellWidth);
    if (_x > -1 && _x < rows && _y > -1 && _y < columns){
      $.ajax({
        method: "POST",
        url: `http://localhost:3000/api/v1/games/${gameId}/moves`,
        data: {
          point_x: _x,
          point_y: _y
        }
      })
      .done(function( response ) {
        drawBoard(response.game_id, response.grid, response.mine_found, response.flags, response.point_x, response.point_y);

        if(response.game_status == 'won' || response.game_status == 'lost'){
          var container = document.getElementById('main');
          var paragraph = document.createElement('p');
          paragraph.id = 'notice';
          paragraph.style.fontSize = "xx-large";
          if(!response.mine_found){
            var textMessage = document.createTextNode("You Win!!");
          }else{
            var textMessage = document.createTextNode("You Lose!!");
          }
          paragraph.appendChild(textMessage);
          container.appendChild(paragraph);
        }
      });
    }
    return;
  }

  var drawBoard = function(gameId, grid, mineFound, flags, _x, _y){
    var canvas = document.getElementById(gameId);
    var context = canvas.getContext("2d");

    console.log(flags);

    for (var y = 0; y < grid.columns; y ++) {
      for (var x = 0; x < grid.rows; x ++) {
        var p = 40 * x + padding + 1;
        var q = 40 * y + padding + 1;
        var width = cellWidth - 1;

        if(grid.content[x][y] != null && !flags.includes([_x, _y])){
          if(grid.content[x][y] == -1 && mineFound){
            if(x == _x && y == _y){
              context.fillStyle = foundMineColor;
            }else{
              context.fillStyle = visibleCellColor;
            }
            context.fillRect(p, q, width, width);
            context.fillText('💣', p + 20, q + 30, width, width);
          }else{
            if(grid.content[x][y] == 0){
              context.fillStyle = visibleCellColor;
              context.fillRect(p, q, width, width);
              context.fillStyle = textColor;
              context.fillText('', p + 20, q + 20, width, width);
            }else{
              if(grid.content[x][y] > 0){
                context.fillStyle = visibleCellColor;
                context.fillRect(p, q, width, width);
                context.fillStyle = textColor;
                context.fillText(grid.content[x][y], p + 20, q + 30, width, width);
              }
            }
          }
        }
      }
    }
  }
</script>
